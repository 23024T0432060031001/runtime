<Project>
  <PropertyGroup>
    <!--
      Windows arm/arm64 jobs don't have MSIs to sign. Keep it simple: allow not finding any matches
      here and rely on overall signing validation.

      During post build signing, there are no packages to sign during SignFinalPackages.
    -->
    <AllowEmptySignList Condition="'$(DotNetBuildOrchestrator)' != 'true'">true</AllowEmptySignList>
    <!-- TODO: Change condition when runtime's official publishing starts using Publishing.proj:
         https://github.com/dotnet/source-build/issues/4239 -->
    <EnableDefaultArtifacts Condition="'$(DotNetBuildOrchestrator)' != 'true'">false</EnableDefaultArtifacts>
  </PropertyGroup>

  <ItemGroup>
    <!-- apphost and comhost template files are not signed, by design. -->
    <FileSignInfo Include="apphost.exe;singlefilehost.exe;comhost.dll" CertificateName="None" />

    <!--
      The DAC and the DBI must go through special signing provisioning using a system separate
      from MicroBuild.
    -->
    <FileSignInfo Include="mscordaccore.dll" CertificateName="None" />
    <FileSignInfo Include="mscordbi.dll" CertificateName="None" />

    <!-- We don't need to code sign .js files because they are not used in Windows Script Host. -->
    <!-- WARNING: Needs to happed outside of any target -->
    <FileExtensionSignInfo Update=".js" CertificateName="None" />

    <!-- Third-party components which should be signed.  -->
    <FileSignInfo Include="Newtonsoft.Json.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="Mono.Cecil.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="Mono.Cecil.Mdb.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="Mono.Cecil.Pdb.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="Mono.Cecil.Rocks.dll" CertificateName="3PartySHA2" />

    <FileExtensionSignInfo Include=".msi" CertificateName="MicrosoftDotNet500" />
    <FileExtensionSignInfo Include=".pkg" CertificateName="8003" />
    <FileExtensionSignInfo Include=".deb;.rpm" CertificateName="LinuxSign" />
  </ItemGroup>

  <!-- Update existing defaults from arcade that were using Microsoft400 to use the .NET-specific cert -->
  <ItemGroup>
    <FileExtensionSignInfo Update="@(FileExtensionSignInfo->WithMetadataValue('CertificateName','Microsoft400'))" CertificateName="MicrosoftDotNet500" />
    <StrongNameSignInfo Update="@(StrongNameSignInfo->WithMetadataValue('CertificateName','Microsoft400'))" CertificateName="MicrosoftDotNet500" />
    <FileSignInfo Update="@(FileSignInfo->WithMetadataValue('CertificateName','Microsoft400'))" CertificateName="MicrosoftDotNet500" />
  </ItemGroup>

  <ItemGroup Condition="'$(EnableDefaultArtifacts)' != 'true'">
    <!-- Exclude symbol packages from have a NuGet signature. These are never pushed to NuGet.org or
         other feeds (in fact, that have identical identity to their non-symbol variant) -->
    <DownloadedSymbolPackages Include="$(DownloadDirectory)**\*.symbols.nupkg" />
    <DownloadedSymbolPackagesWithoutPaths Include="@(DownloadedSymbolPackages->'%(Filename)%(Extension)')" />
    <FileSignInfo Include="@(DownloadedSymbolPackagesWithoutPaths->Distinct())" CertificateName="None" />

    <ItemsToSignWithPaths Include="$(DownloadDirectory)**\*.msi" />
    <ItemsToSignWithPaths Include="$(DownloadDirectory)**\*.exe" />
    <ItemsToSignWithPaths Include="$(DownloadDirectory)**\*.nupkg" />
    <ItemsToSignWithPaths Include="$(DownloadDirectory)**\*.zip" />

    <ItemsToSignWithoutPaths Include="@(ItemsToSignWithPaths->'%(Filename)%(Extension)')" />
    <ItemsToSignPostBuild Include="@(ItemsToSignWithoutPaths->Distinct())" Condition="'$(PostBuildSign)' == 'true'" />
    <ItemsToSign Include="@(ItemsToSignWithPaths->Distinct())" Condition="'$(PostBuildSign)' != 'true'" />
  </ItemGroup>

  <!-- Include installers -->
  <ItemGroup Condition="'$(EnableDefaultArtifacts)' == 'true'">
    <Artifact Include="$(ArtifactsPackagesDir)**\*.tar.gz;
                       $(ArtifactsPackagesDir)**\*.zip;
                       $(ArtifactsPackagesDir)**\*.deb;
                       $(ArtifactsPackagesDir)**\*.rpm;
                       $(ArtifactsPackagesDir)**\*.pkg;
                       $(ArtifactsPackagesDir)**\*.exe;
                       $(ArtifactsPackagesDir)**\*.msi"
              Exclude="$(ArtifactsPackagesDir)**\Symbols.runtime.tar.gz"
              IsShipping="$([System.String]::Copy('%(RecursiveDir)').StartsWith('Shipping'))">
      <!-- Exclude wixpack.zip files from checksum generation -->
      <ChecksumPath Condition="$([System.String]::Copy('%(Filename)%(Extension)').EndsWith('.wixpack.zip')) != 'true'">%(FullPath).sha512</ChecksumPath>
    </Artifact>
  </ItemGroup>

</Project>
